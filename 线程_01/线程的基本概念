线程的基本概念：（线程是操作系统调度的最小单位   进程是操作系统分配资源的最小单位）
 什么是线程？
    1.在一个程序里的一个执行线路就叫做线程。更加准确的定义是：线程是“一个进程内部的控制序列”
    2.一切进程至少都有一个执行线程
	3.线程在进程内部运行，本质是在进程地址空间内运行
	4.在Linux系统中，在CPU眼中，看到的PCB都要比传统的进程更加轻量化
	5.透过进程虚拟地址空间，可以看到进程的大部分资源，将进程资源合理分配给每个执行流，就形成了线程执行流
	
	**其实内核当中没有线程的概念，叫做轻量级进程，创建一个线程相当于在内核中创建一个PCB（task_struct）结构体，
	创建出来的PCB是指向进程的虚拟地址空间的。
	线程是C库中的概念，因为线程的接口都是C库提供的。
	在task_struct当中变量pid指的是线程id，对于进程号来说，是在tgid当中保存的
	tgid(thread group ID):线程组id
	pid(process ID):轻量级进程ID，线程ID
     如果当前的程序当中只有一个主线程()执行main的函数的线程)，tgid==pid
	 如果当前程序当中有多个线程，主线程的PCB当中tgid==pid
                                 工作线程(新创建出来的执行流)PCB当中tgid!=pid(该tgid是标识当前线程属于
										 那一个进程的) 而这些线程会有自己的pid，tgid是一样的
 线程的优点：
    1.创建一个新的线程的代价要比创建一个新的进程小得多
	2.与进程之间的切换相比，线程之间的切换需要操作系统做的工作要少很多
	3.线程占用的资源要比进程少很多
	4.能充分利用多处理器的可并行数量
	5.在等待慢速I/O操作结束的同时，程序可执行其他的计算任务
	6.计算密集型应用，为了能在多处理器系统上运行，将计算分解到多个线程中实现
	7.I/O密集型应用，为了提高性能，将I/O操作重叠。线程可以同时等待不同的I/O操作

 线程的缺点：
    1.健壮性/鲁棒性低
	 多线程的程序当中有多个执行流，一旦一个执行流异常，会导致整个进程异常
	2.缺乏访问控制
	3.编程难度高：编写与调试一个多线程程序比单线程程序困难的多。多个执行流可以并发的执行，并发执行的时候，可能会访问同一个临界资源，
	我们需要对访问临界资源的顺序进行控制，防止程序产生二义性的结果
	4.性能损失：线程在调度的时候是有开销的，如果大量的进程，会导致程序在频繁的切换，占用CPU去执行上下文信息，程序计数器

 线程异常：
   单个线程如果出现除零，野指针等问题导致线程崩溃，进程也会随着崩溃
   线程是进程的执行分支，线程出异常，就类似进程出异常，进而触发信号机制，终止进程，进程终止该进程内的所有线程也就随即退出

 线程用途：
   合理的使用多线程，能提高CPU密集型程序的执行效率
   合理的使用多线程，能提高IO密集型程序的用户体验（如生活中的我们一般写代码，一遍下载开发工具，就是多线程运行的一种表现）

 线程的独有和共享：
   独有：
        tid：线程ID
		栈
		信号屏蔽字
		调度优先级
		一组寄存器
   共享：
        共享进程虚拟地址空间
		文件描述符表
		当前进程的工作路径
		用户ID和组ID

 多线程和多进程的区别：
    多进程:每一个进程都有自己独立的虚拟地址空间，这个也是进程独立性的原因。一个进程的崩溃，不会导致另外一个进程受到的影响。
	  多进程的程序也可以提高程序运行效率（本质也是增加执行流），但是带来了进程间通信的问题。
	多线程:每一个进程当中的执行流都是公用一个虚拟地址空间，所以，一个执行流的异常会导致整个程序的退出。多线程
	  的程序也是可以提高运行效率，但是会导致程序的健壮性低，代码编写复杂（并发执行带来的后果）。

poll:
  1.跨平台移植性不如select，poll只能在linux环境下使用，也是采用
  轮询遍历的方式，所以相率也没有明显增加。
  
  2.相较于select改进的点:
    （1）不限制监控的文件描述符个数
    （2）文件描述符对应一个事件结构，告诉poll两件事：
        要监控的文件描述符
        关心文件描述符的时间

  3.接口：
    int poll(struct pollfd* fds,nfds,int timeout);

      fds:事件结构数组
      struct pollfd{
        int fd; /*file descriptor*/关心的文件描述符是什么
        short events;/*requested events*/关心的文件描述符产生什么事件
          POLLIN:可读事件
          POLLOUT：可写事件
            如何一个文件描述符既关系可读事件，也关心可写事件，应该将两者进行"按位或"连接，采用的是位图的方式
            eg：events = POLLIN|POLLOUT
          short revents;/*returned events*/当关心的文件描述符产生
           对应关心的事件时：将发生的事件放到revevts当中返回给调用者;revents在每次poll监控之初，内核就会将其初始化为空。
          （所以不用对齐专门进行清空操作）
      };
     例子： 程序员在代码中先定义一个事件结构数组：
      struct poll fd_arr[num]; //num是自定义的 
      fd_arr[0].fd = 3;
      fd_arr[0].events = POLLIN;
      ...

      nfds:指定的时fd_arr数组当中的有效元素个数

      timeout：超市等待时间
        大于0：带有超时时间的监控，单位为毫秒
        等于0：非阻塞
        小于0：阻塞
      
      返回值:
        小于0：poll出错
        等于0：监控超时
        大于0：返回就绪的文件描述符个数

poll实现IO多路复用的流程:
  1.定义事件结构数组
  2.监控
    :产生可读事件的时候处理事件

poll的优缺点:
  优点:
    （1）poll采用了事件结构的方式，简化了代码的编写。
    （2）poll不限制文件描述符个数
    （3）不需要重新添加文件描述符到事件结构数组当中了
  缺点：
    （1）poll也是需要轮询遍历事件结构的数组的，随着文件描述符的增多，而性能下降。
    （2）poll不支持跨平台
    （3）poll也没有告诉用户哪一个具体的文件描述符就绪了，需要程序员进
    行遍历。
    （4）poll也是需要将时间结构数组从用户空间拷贝到内核，从内核拷贝到
    用户空间。






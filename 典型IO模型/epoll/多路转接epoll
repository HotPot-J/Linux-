
epoll: #include<sys/epoll.h>
  接口：
    1.创建epoll操作句柄
    int epoll_create(int size);
      （1）size:本来的含义是定义epoll最大能够监控的文件描述符个数。
      Linux内核版本2.6.8之后，该参数size就已经被弃用了，内存现在采用
      的是扩容的方式。 size是不可传入负数的。
      从内核的角度：在内核当中创建一个结构体，struct eventepoll结构体
      （2）返回值：返回epoll操作句柄，即就是操作struct eventepoll的操纵杆。
      该结构体种包含:
        rdllist:双向链表
        rbr：红黑树

    2.操作epoll
      int epoll_ctl(int epfd,int op,int fd,struct epoll_event*event);
      （1）epfd：epoll操作句柄
      （2）op(option):想让epoll_ctl函数做什么事情
          EOPLL_CTL_ADD:添加一个文件描述符对应的事件结构到红黑树中
          EPOLL_CTL_MOD:修改一个已经在红黑树当中的事件结构
          EOPLL_CTL_DEL:从eopll的红黑树当中删除一个文件描述符对应的事件结构
      （3）fd：告诉eopll 用户关心的文件描述符
      （4）event：类型是一个struct epoll_event结构体，也是epoll的事件
      结构
          struct epoll_event{
            uint32_t events;/*Epoll events*/用户对文件描述符所关心的事件
            EPOLLIN:可读事件
            EPOLLOUT:可写事件
            epoll_data_t data;/*user data variable*/ 
            
            /*data 是一个联合体，里面包含void*ptr int fd等信息
              ptr:可以传递一些信息，当epoll监控该描述符就绪时，返回给
              程序员可以拿到这些信息。
              fd: 用户所关心的文件描述符，可当作文件描述符事件就绪后
              返回给程序员。
              （ps：由于data结构为联合体，所有在其内容查看时只能任选
              其一）
            
            */
          }

        4.监控
          int epoll_wait(int epfd,struct*epoll_events,int maxevents,int timeout);
          （1）epfd:epoll操作句柄
          （2）events:epoll事件结构数组--》出参，返回就许多事件结构
            （每一个事件都对应一个文件文件描述符） 
          （3）maxevents：最大能够拷贝多少个事件结构
           (4) timeou:超时时间 单位为毫秒
            大于0：带有超时时间 单位为毫秒
            等于0：非阻塞
            小于0：阻塞
          （5）返回值
            大于0：返回就绪的文件描述符个数
            等于0：等待超时
            小于0：监控出错

**（自己理解的）底层的逻辑过程: 
epoll通过定义一个struct eventepoll结构体，让后将我们
需要监控的事件（文件描述符、读/写（行为））通过epoll_ctl添加到结构体
中的红黑树，然后再用epoll_wait去监控。当所监控的文件描述符有事件发生
，我们将这样的事件拷贝到eventepoll结构体中的双向链表中去，再从双向
链表递交给程序员的时候，是通过改变其页表，直接指向内存当中的双向链表
中 就绪的事件结构 所占用的物理地址空间。
（PCB中有个内存指针，内存指针指向虚拟地址空间，虚拟地址空间又通过更改页表中的映射找到真实的物理地址）

二、epoll的优点:
  1.接口使用方便：虽然拆分成三个函数，但是不用每次循环的设置关心的文件描述符。
  2.数据拷贝轻量：只在适合的时候调用EPOLL_CTL_ADD将文件描述符拷贝到内核
  3.事件回调机制：避免使用遍历，而是使用回调函数的方式，将就绪的文件
  描述符结构加入到就绪队列，epoll_wait返回，直接访问就绪队列就知道是
  哪些文件描述符就绪。这个时间复杂度为O(1) 即使文件描述符很多，效率无影响
  4.没有监控数量限制（文件描述符数目无上限）

**三、epoll对描述符就绪事件的触发方式
  （1）水平触发：LT
      epoll默认工作方式，select和poll都是水平触发
    可读事件：只要接收缓冲区当中的数据大于低水位标记(1字节)，就会一直
    触发可读事件就绪，直到接收缓冲区当中没有数据可读。

    可写事件：只要发送缓冲区当中的数据空间大小大于低水位标记(1字节)，
    就会一直触发可写事件就绪，直到缓冲区当中没有空间可写。
      
  （2）边缘触发（边沿触发）：ET
      只有epoll支持该方式。
      
      使用方式:只需要在文件描述符对应的事件结构当中的关心的事件上
      按位或EPOLLET即可
      struct epoll_event ev;
      ev.events = EPOLLIN|EPOLLET;

      可读事件:只有当新数据到来的时候，才会触发可读。
               即每一次来一个新数据只通知一次，如果应用程序没有将接收
               缓冲区中的数据读走或者读完，也不会再通知，直到新的数据
               到来才会触发可读事件。
      可写事件:只有发送缓冲区剩余空间从不可写变成可写才会触发一次可写
               事件就绪。

    总结:
      对于ET模式，在就绪事件发生的时候，只会通知一次，如果没有将数据
      读完，则不会继续通知。所以对于ET模式的使用，需要循环的将数据读
      完。
 
 **epoll+ET所带来的问题： 
    1.那么在循环读数据的时候如何判断读完了呢？
        read的返回值是读取了多少个字节，每次我们将读到的部分数据
        保存到str中进行+=，直到某一次read的返回值小于我们接收缓冲区的
        最大接收能力，则说明读完数据，则进行break;执行接下来的逻辑。
    2.但1的解决方案会引发饥饿状态：当最后一次恰好读完数据且与接收能力
    相等，则无无法break，下一次调用read会造成阻塞。
  
    3.针对饥饿状态，我们需要对read操纵的文件描述符属性改为非阻塞。
    这样在无数据可读的时候，会返回一个错误（小于0的数），此时
    我们只需要判断 if(errno==EAGAIN||errno==EWOULDBLOCK),就说明数据
    读完了。
      #include<fcntl.h>
      int fcntl(int fd,int cmd,.../*arg*/);(可变参数)
        fd：操作哪一个文件描述符
        cmd:告诉fcnl函数做什么事情
          F_GETFL:获取文件描述符属性，arg（不需要关心），文件描述符属性通过返回值返回给调用者
          F_SETFL：设置文件描述符属性，arg设置成为文件描述符需要设置成为的属性 int类型

       例子：比如改变0号文件描述符的属性
          int flag = fcntl(0,G_GETFL); //获取其属性
          fcntl(0,F_SETFL,falg|O_NONBLOCK);//改变


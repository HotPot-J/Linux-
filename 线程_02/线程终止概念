线程终止：
  线程终止的方式：
     1.从线程的入口函数的return返回
     2.void pthread_exit(void* value_ptr);---->谁调用谁退出
	 参数：value_ptr:当前线程的退出信息 value_ptr不要指向一个局部变量 
	 返回值：无返回值，跟进程一样，线程结束的时候无法返回到它的调用者
     3.当主线程调用pthread_exit退出的时候，进程是不会退出的，但是主线程的状态变成了
	 z,也就说主线程变成了一个“僵尸线程”，工作线程的状态还是R/S

	 4.int pthread_cancel(pthread_t thread):可以结束任意的一个线程，只要知道线程的一个线程标识符就可以了
		thread：线程标识符
        pthread_t pthread_self(): 可以获取当前线程的线程标识符


	** 线程在默认创建的时候，默认属性当中认为线程是joinable的
	joinable：当线程在退出的时候，需要其他线程来回收该线程资源，如果没有线程回收
	，则共享区当中，对于退出线程的空间还是保留的，退出线程的资源没有被释放，也就
	是造成了内存泄漏。

	线程等待：
	  线程等待的必要性，是为了释放退出线程的资源，防止内存泄漏
	  pthread_join(pthread_t,void**) //阻塞接口
	  pthread_t:需要等待那一个线程，传入等待线程的标识符
	  void**：获取线程退出的时候:
	       return:获取入口函数return返回的内容
		   pthread_exit：获取pthread_exit(void*)的参数
		   pthread_cancel：获取到一个常数，PTHREAD_CANCELED

   应用层：负责应用程序之间的数据传输，程序员工作在这一层。
      
      1.TCP粘包---自定制协议
	         
	     如何解决TCP粘包问题？
			1.按照数据长度来解决(可以解决简单的传输定长数据TCP粘包问题)
	         通信双方约定数据长度
				                  
			 2.数据包头(定长的)+分隔符(可以完美解决数据粘包问题)
	              
	         定长包头当中可以获取到当前数据的长度
				                
			分隔符可以找到下一条数据的起始位置（下一条数据的包头）
								              
			 分隔符不一定就是一个字节的字符，也可以是字符串 17             
			 分隔符起到了一个定义数据边界的作用
															  
	结构传输:
	序列化:将对象转化为字节序列的过程
		send(sockfd,Data,sizeof(Data),0);
															
	    反序列化：将字节序列转化为对象的过程
		struct Data d;
		recv(sockfd,&d,sizeof(struct Data),0);							
														  
     http协议：超文本传输协议
	URL：http://user:passwd@www.baidu.com:80/dir/index.htm?id=1&wd=C%2B%2B#ch1																																					              协议方案名+用户名和密码+域名(服务器的ip地址)
	               
	              80：服务端侦听端口
		
			/dir/index.htm（带层次的文件路径）：浏览器要请求的资源路径
		   ‘/’并不是Linux操作系统当中的根目录，而是http服务器定义的逻辑上的根目录
															   
		   ?id=1&wd=C%2B%2（查询字符串）：浏览器给http服务器提交的数据，提交的单个数据是按照key=value的形式，多个数据中间使用进&>进行分隔。在提交的数据中如果不加以区分，有可能造成歧义。
																				在传输特殊字符的时候，需要进行urlencode，编码的方式就是将特殊字符按照16进制进行传输对于服务器而言在接收到url编码之后的查询字符串需要进行url解码

     #ch1(片段标识符)：表示当前页面被浏览器加载后，定位到什么位置


http协议格式:
	请求
		请求首行:
			请求方法 url 协议版本
			（请求方法：
			     GET:从服务器上面获取资源的方法
					1.GET并不是只能向服务器获取资源，其实也可以在查询字符串当
					中提交数据到浏览器当中。
					2.GET请求提交的数据都是在url当中

				 POST:向服务器提交数据的方法
					1.POST提交数据是在正文当中

				  小结：
					POST方法比GET方法更加私密。
					POST比GET更安全（这句话不完全对），还是应该加密正文。
			 ）
		请求头部:
			具有多行数据，每行数据都是一个key：value的形式，每行数据使用\r\n
			进行分隔。
			
			Content-Length：正文长度，防止粘包。
			
			Content-Type：正文的编码模式
				text/html：HTML格式	application/json：数据格式
				text/plain：纯文本格式	application/msword：word文档格式
				text/ping：png图片格式

			referer：当前的页面是从哪一个页面跳转过来的

			Cookie：向服务器提交浏览器本地保存的认证信息。认证信息是之前登录
			服务器的时候，服务器返回回来的。

			Tranfer-Encoding：针对于正文而言，可以支持分块传输

			Location：和重定向搭配使用，http服务器会告诉浏览器，你刚刚请求的
			页面应该去哪一个地址上面重新申请下；

			User-Agent：生命操作系统和浏览器版本信息；

			Connection：keep-alive保持长连接
				http协议应用层协议，传输层使用的是tcp协议，早期http是无状态协
			议，使用的是短链接
      
		\r\n
	    正文


	 响应：
		响应首行
			协议版本 状态码 状态码解释
				状态码：
					1xx：接收到请求正在处理
					2xx：请求正常处理完毕了
					3xx：重定向状态，表示浏览器需要进行附加操作，再能完成刚才
					的请求操作
					4xx：服务器无法处理这个请求：eg：404 page Not Found
					5xx：服务器处理出错了 ：eg：502 Bad Gateway

		响应头部
			响应头部当中也具有多行数据，每行数据是key-value的形式，行与行之间
			使用\r\n进行分隔
			响应头部的字段也是和请求头部大同小异；


		\r\n
		正文

总结：
	1.http协议是应用层的协议，在传输层使用tcp协议，在网络层使用ip协议
	2.http本身是为了处理大量的请求，设计在传输层使用tcp连接为短链接
	3.目前http已经支持了长连接
	4.http是没有加密版本的http协议，加密版本可以使用https，s代表ssl：非对称加
	密。

 








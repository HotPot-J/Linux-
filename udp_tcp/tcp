传输层---TCP协议

	1.特性：面向连接，可靠传输，面向字节流
    
	TCP协议段格式（部分）：
		
		源/目的端口号：表示数据是从哪个进程来，到哪个进程去；
		
		32位序号：标识TCP源端向TCP目的端发送的数据字节流
		
		32位确认序号：标识TCP目的端期望TCP源端的下一个请求序号；

		4位TCP报头长度：表示该TCP头部有多少个4字节；（4位能表示的最大数字
		为全1时的15，所以TCP头部最大长度为15*4 = 60个4字节）

		6位标志位:
			URG：紧急指针是否有效
			ACK：确认号是否有效
			PSH：提示接收端应用程序立刻从TCP缓冲区把数据读走
			RST：对方要求重新建立连接；通常把携带RST标识的称为复位报文段
			SYN：请求建立连接；我们把携带SYN标识的称为同步报文段
			FIN：通知对方，本端就要关闭了，我们称携带FIN标识的为结束报文段
			
		 16位校验和：发送填充端，CRC校验
			
		 16位紧急指针：标识那部分数据是紧急数据
      
    三次握手的理解：
		1.发送的数据包名称 SYN ACK+SYN ACK
		2.配合客户端和服务端的状态变迁来进行描述 
		  SYN_SENT SYN_RCVD ESTABLISHED ESTABLISHED
		  （客户端向服务端发送携带SYN标识的报文请求建立连接，客户端状态变
		  为SYN_SENT，服务端在收到携带SYN标识报文后状态变为SYN_RCVD，服务
		  端给客户端发送携带ACK+SYN标识的报文，客户端收到该报文，状态改为E
		  STABLISHED（已建立连接），客户端给服务端回复携带ACK标识的报文，
		  服务端收到该报文后，状态也改 为ESTABLISHED） 此时客户端和服务端
		  成功建立TCP连接 该过程称为三次
		  握手，内核完成的。
		3.包序管理

		（建立TCP连接后，对于客户端和服务端，谁都可以先发起/结束会话）
	四次挥手：
		eg： 客户端发送FIN，状态变为FIN_WAIT_1,服务端收到后状态位CLOSE_WAI
		T,服务端发送ACK，客户端收到后状态为FIN_WAIT_2  然后，服务端又向客
		户端发送FIN，状态变为LASK_ACK，客户端收到后状态为TIME_WAIT,客户端
		又给服务端发送ACK确认，服务端收到后变为CLOSE状态，等待2MSL时间后，
		客户端状态变为CLOSE。

        MSL: 最大报文段生存时间，指的是发送方认为TCP报文在网络中的最大生存
		时间。
		
		为什么要等待2MSL时间才变为CLOSE呢？
			因为，如果ACK丢失，则服务端会认为FIN并没有递达到客户端，服务端
			进行重传FIN报文。
		    2MSL = 丢失的ACK的MSL+重传的FIN的MSL


1.如果一个TCP服务端程序，需要立即重新启动服务端程序，在重启服务端程序的时
候需要绑定端口；
	eg: 19999端口被绑定，当所对应的程序被kill，重新启动该端口：./server 192.168.123.211 19999 会绑定失败 该端口已被占用
	产生这样的问题原因：由于连接的状态并没有变成CLOSE，而是TIME_WAIT；
			服务器先断开连接，在四次挥手的最后阶段，服务器会处于TIME_WAIT
			状态，如果在等待2MSL的时间内，我们的内核会拿着这个端口，等待2M
			SL时间，而这个行为是传输层TCP行为，即使应用程序已经退出掉了，
			在内核中对应端口还在被占用着
	
	如何解决这样一个问题呢（Address alread in use）？
		*地址复用：（在创建完套接字后即可使用该接口）
			int setsockopt(int sock,int level,int optname,const void* optval,socklen_t len);
			sock:将要被设置的套接字，将要被获取选项的套接字
			level：指定套接字的层次，取值三种
				SOL_SOCKET:通用套接字选项--》地址复用的
				IPPROTO_TCP:TCP选项
				IPPROTO_IP:IP选项
			optname：在level当中想完成什么任务
				SOL_SOCKET
					SO_REUSEADDR:允许重用本地地址和端口
					SO_RECVBUF:接收缓冲区的大小
				IPPROTO_TCP
					TCP_MAXSEG:获取TCP最大数据段的大小
				IPPROTO_IP
					IP_TTL:获取最大跳数（最大生存时间）

			optval：具体怎么完成上面的任务
				地址复用：传入1即可
					int i = 1; 将&i传入即可;

			len:optval的长度
					
				
网络抓包:
	win:
		wireshark
	Linux:
		tcpdump
			tcpdump -i any port[服务端侦听端口] -s 0 -w 123.data 
	        -i any :抓当前机器中所有网卡信息  		
			-s 0:一条完整数据
			-w 123.data：将这条信息写道123.data这个文件中
			需要使用root用户



			

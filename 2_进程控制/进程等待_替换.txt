1.进程等待
    a.进程等待的原因：防止僵尸进程的产生
	   父进程通过等待的方式，回收子进程资源，获取子进程退出信息
    从而防止僵尸进程的产生
	
	b.进程等待的方法
	  wait函数： pid_t wait(int *status);
	     返回值：成功则 返回被等待进程pid，失败返回-1
		 参数：输出型参数，获取子进程退出状态，不关心则可以设置成为NULL
		 
		 调用wait会导致父进程陷入阻塞状态，直到有一个子进程退出，则执行
	  wait的逻辑之后退出
	    
		
	  waitpid函数： pid_t waitpid(pid_t pid,int *status,int options);
	     
		 返回值：
		 当正常返回的时候waitpid返回收集到的子进程ID；
		 如果设置了w
		 如果调用中出错，则返回-1，这时errno
		 
		 参数：
		     pid：
			     pid = -1，等待任一个子进程。与wait等效
				 pid>0,等待其进程ID与pid相等的子进程
				 
			 status：退出的子进程的退出状态
			 
			 options:设置当前的waitpid是阻塞的还是非阻塞的
				  WNOHANG：非阻塞
				  0：阻塞
				  
		c.status   其是一个四个字节的数据，但是只用了低两个字节
		      正常退出：只用了这两个字节当中的高八位，来表示进程的退出码
			  异常退出:只用了这两个字节当中的低8位
			  

       		  
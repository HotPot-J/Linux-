TCP的可靠传输：
	
	1.确认应答机制：
		1.1 当发送方发送一个报文的时候，需要带上序号，当我们接收
		方收到这个报文的时候，需要对该报文进行确认；
		1.2 确认的具体做法就是，给对方发送一个确认报文，而确认报文
		当中的序号就是告诉发送方，自己期望的下一个序号是多少。
		（序号机制从当前路径 ../TCP序号和确认序号 中有详细讲解）

	2.超时重传机制
		2.1 当消息发送方，发送一条消息之后，就会开启一个重传计时器
		用来计算消息发送出去的时间，当消息发送出去的时间大于RTO的时
		候，还没有收到确认报文，则重传该报文。
			
		RTO：超时重传时间  是动态计算出来的（根据网络情况）

		RTO = 2*RTT  
		RTT：报文往返时间
			从发送报文开始计算，直到收到确认应答，所经历的时间被称
			为报文往返和时间

	3.滑动窗口
		3.1 窗口：已经被发送方发送到网络上，但是还没有完成确认的分
		组的集合；相对于之前学到的确认应答机制而言，滑动窗口机制的
		引入，不必让发送方等待一个报文的确认到达之后，再发送下一个
		报文，而是允许发送方发送多个分组的报文到网络上。
	
		滑动窗口是为了提高双方发送数据的效率的，并不是发送方不需要
		应答确认！

		3.2 分组： TCP发送数据流序号的集合
				   TCP在发送数据的时候都是有一个起始序号的；
			
			例如：hello 比如其起始序号为2 则其会消耗5个序号2 3 4 5 
			6，那么（2，3，4，5，6）就是一个数据流序号集合（分组）

		3.3 对于TCP通信双方而言，都会维护一套窗口，即发送窗口和接收
		窗口。
			发送窗口：保存的是没有被确认的报文，发送缓冲区的一部分
			接收窗口: 等同于接收缓冲区

		3.4 窗口大小 = 允许不接收到确认应答，就可以发送到网络上的分
		组数量（是在三次握手期间进行协商的）
			
		  **窗口是可以动态变化的：（根据网络的能力来决定）
			网络良好，窗口大，数据发送快 
			网络差，窗口小，数据发送慢
		
		3.5 窗口的移动一定要收到最早的分组的确认应答之后，才可以向
		后滑动
			在滑动窗口机制中：
				确认序号：期望消息发送方下一次发送数据的起始位置(序
						号)
				情况一：(发送方数据丢失)
						针对于消息接收方而言，如果没有收到消息发送
				方发送的所期望的数据，即使收到了更大序号的数据，也
				不可以进行确认回复。而是一直回复丢失报文的起始序号

				情况二：（应答方的确认丢失）
				        如果发送方接收到比未确认序号更加大的确认序
				号的时候，就会认为没收到的小的确认序号所对应的TCP报
				文，已经被对端收到了
					原理：1.如果消息发送方没有收到小序号的tcp报文的
					确认数据包，但是能收到大的确认数据包，说明对端
					一定收到了小的序号的tcp报文，否则消息接收方不会
					发大的确认序号


	4.拥塞控制机制：（慢启动，拥塞避免，快重传，快恢复）

		4.1 慢启动：
		  核心思想:当双方建立连接之后，一开始不要发送大量的数据，而
		  先发送少量的数据，探测网络拥塞程度，当网络情况较好的情况
		  下，逐渐增大发送的数据量；
		  拥塞窗口：cwnd
		  慢开始门限：是一个阈值，当拥塞窗口大小小于慢开始门限的时
		  候，执行慢开始算法（指数增加）；超过慢开始门限，则执行拥
		  塞避免算法（线性增加）；

		 2.拥塞窗口：一般情况下，发送方在发送数据的时候，不单单要考
		  虑自己的发送窗口，还需要考虑拥塞窗口；
		  
	** 发送开始，定义拥塞窗口为1，每次收到一个ACK应答，拥塞窗口
	 +1
		每次发送数据包的时候，将拥塞窗口和接收端主机反馈的窗口大小
		作比较，取较小值作为实际发送窗口。

		3.随着拥塞窗口的+1（轮次的增加），拥塞窗口的大小也随之增加
		。
		为了不增长的过快，定义了慢启动的阈值，当拥塞窗口超过这个阈
		值，不按照指数增长，而是线性增长

	**TCP启动时，慢启动阈值等于窗口最大值
	  每次超时重传时，慢启动阈值会变成原来的一半，同时拥塞窗口置回1
			
			
	   4.2 快重传
		核心思想：当接收方接收到一个数据的报文段的时候，就发出重复
		确认，意味着想让数据发送方提早的知道有一个数据段没有到达接
		收方

		比如：当发送端同时发送了m1 m2 m3 m4 m2当m2丢包后，m3 m4 m5
		到达接收端，接收端仍然不断发送m1的确认信号，即让数据发送方
		知道m2未到达接收方，出现这种连续重复确认情况，即使未到达RTO
		（超时重传时间），也会快速重传m2，这就是快重传机制。
			该前提下，当重传的m2到达接收端，此时接收端并不是确认m2
			而是确认m5，代表m2，m3，m4 m5都已到达接收端

		注意:快速重传依赖的是接收方连续的确认数据包，不会等待接收方
		进行捎带应答确认。

	
		4.3 快恢复 
			如果网络拥塞导致发送方某一个TCP报文丢失，接收方会依照快
			重传，一连串发送三个确认包；

			针对于发送方而言，如果能够收到三个重复确认包。针对于发
			送方而言，会认为网络拥塞的并不是很严重，完全没有从慢开
			始进行传输，而是设置新的慢开始门限，将拥塞窗口等于新的
			慢开始门限，从而执行拥塞避免算法。

			设置新的慢开始门限 = 拥塞窗口/2；
			执行拥塞避免算法(线性增大)
			










			
		










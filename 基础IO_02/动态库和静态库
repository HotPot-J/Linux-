1.静态库和动态库：
   静态库
       win环境下的后缀是.lib
	   linux环境下的后缀 .a 前缀是：lib eg：lib.a
	   静态库会将编译的代码当中的所有函数的代码全部编译到静态库当中去
	   如果程序链接静态库生成可执行程序的时候，会将静态库当中的所有代码全部编译到可执行程序当中去
	当程序执行的时候，就不需要依赖静态库了
	
	动态库
	   win环境下的后缀是.dll
	   linux环境下的后缀是.so 前缀也为lib
	当我们编译一个程序依赖一个动态库的时候，可执行程序会将动态库当中的函数保存在符号表当中
 当程序运行的时候，操作系统会加载动态库，从而使可执行程序可以通过符号在动态库当中找到对应
 函数的实现

2.动态链接：
 *在可执行文件开始运行以前，外部函数的机器码由操作系统从磁盘上的
 该动态库中复制到内存中，这个过程称为动态链接。

 *动态库可以在多个程序间共享，所以动态链接使得可执行文件更小，节
 省了磁盘空间。操作系统采用虚拟内存机制允许物理内存中的一份动态库
 被要用到该库的所有进程共用，节省了内存和磁盘空间。

 3.**静态库/动态库的生成与使用:
  
    动态库：
      假设当前路径下有：add.c add.h main.c sub.c sub.h
      （1）//先将a.c sub.c编译为.o后缀
        gcc -c add.c -o add.o
        gcc -c sub.c -o sub.o
      （2）//生成静态库
        ar -rc libmymath.a add.o sub.o  (ar是gnu归档工具，rc表示replace和create)
      （2）//查看生成的静态库列表
        ar -tv libmymath.a （t：列出静态库中文件，v：详细信息）
   结果：
        rw-r--r-- 0/0 （省略） add.o
        rw-r--r-- 0/0 （省略） sub.o
      （3）使用静态链接
        gcc main.c -L. -lmymath
        (-L:指定静态库路径)
        (-l:指定库名(去除前缀后缀))
        
    静态库：
      假设当前路径下有：a.c a.h main.c 
      （1）//生成动态库
        gcc -shared -fPOC a.c -o  libprint.so （share表示生成数据共享格式，fPIC：产生位置无关码）
      （3）使用动态链接
        gcc main.c -o main -L. -la
      
3.如何让程序可以长到依赖的动态库
  （1）将动态库放到当前可执行程序的目录下
  （2）在环境变量当中设置动态库的搜索路径，设置环境变量LD_LIBRARY_PATH
    设置环境变量的命令：export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:(动态库的绝对路径)
    查看环境变量的命令：echo $LD_LIBRARY_PATH
  （3）最坏情况：直接将自己写的库或者第三方库和操作系统文件放在一起。

Posix信号量
 1.Posix信号量可以完成什么样的任务
	主要完成线程间或者进程间的同步互斥
 
 2.本质
	资源计数器+PCB等待队列+提供的等待和唤醒接口

	对比条件变量：多了一个资源计数器，这个资源计数器用来对临界资源进行计数器，来进行条件判断，判断当前资源是否可用；
	 可用：则进行资源访问
	 不可用：则进行阻塞等待，直到被唤醒

3.操作接口: 
	3.1定义
		sem_t ===>  eg: sem_t sem;（定义一个信号量）

	3.2初始化
		sem_init(sem_t* sem,int pshared,unsigned int value);
		参数：
			sem：传入信号量的地址
			
			pshared：0表示线程间共享，非零表示进程间共享
			 **当使用sem_init初始化信号量为进程间的时候，会在内核当中创建一块共享内存，来保存信号量的数据结构，其中资源计数器，PCB等待队列都是在共享内存当中维护的。所以我们调用唤醒接口的时候，就通过共享内存实现了不同进程之间的通信。进而实现不同进程之间的同步与互斥的。
			
			 value：实际资源数量，用于初始化信号量当中的资源计数器的
	
	3.3等待接口
		sem_wait(sem_t* sem) --->阻塞方式的等待
		sem_trywait(sem_t* sem)--->非阻塞方式的等待
		sem_timedwait(sem_t* sem,const struct timespec* timeval)
	        --->带有超时时间的等待
		总结: 如果调用等待接口进行获取信号量，会对资源计数器进行-1操作
	如果判断当前信号量当中的资源计数器的值大于0，则能够成功获取信号量，如果资源计数器小于0，则阻塞线程

	3.4 唤醒接口
		int sem_post(sem_t* sem);
		作用：发布信号量，表示资源使用完成了，需要归还资源或者重新生产了一个资源，对信号量当中的资源计数器进行+1操作，唤醒PCB等待队列当中的PCB

	3.5 销毁
		int sem_destroy(sem_t* sem);


4.如何保证同步&互斥
	同步:
		初始化的时候，根据资源的数量来进行初始化Posix信号量当中的资源计数器
	互斥：
		初始化的时候，必须初始化信号量当中的资源计数器的值为1
		
		**实现互斥的原理：
		  对于一个信号量 sem  初始化其资源计数器为：1
		  线程1----》sem_wait(sem_t* sem)   1-->0  可以访问临界资源
		  线程2----》sem_wait(sem_t* sem)   0-->-1 阻塞
		  线程3----》sem_wait(sem_t* sem)   -1-->-2 阻塞 
		 ** 这样的局面就可以 每次只能有一个线程去访问临界资源，实现的不同线程之间的互斥

5. 使用Posix信号量实现一个生产者消费模型
	1.队列--》环形队列--》数组实现
	     插入：
				1.插入
				2.计算下一个插入的位置 ：模运算即可实现环形队列

	2.安全队列
	   同步
			写:sem_init(&SemWrite_,0,数组元素的个数);
			   sem_wait(&SemWrite_);
               arr[PosWrite] = 10;
			   sem_post(&SemRead_);
			
			读：sem_init(&SemRead_,0,0);
			    sem_wait(&SemRead_);
				*Data = arr[PosRead_];
				sem_post(&SemWrite_);

	3.互斥
		     sem_init(&lock,0,1);
		

